[{"/Users/corneezius/corneezius-apps/Dashboard/src/index.js":"1","/Users/corneezius/corneezius-apps/Dashboard/src/reportWebVitals.js":"2","/Users/corneezius/corneezius-apps/Dashboard/src/App.js":"3"},{"size":550,"mtime":1609721483705,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1609721483706,"results":"6","hashOfConfig":"5"},{"size":20560,"mtime":1609954970389,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"14ydu5",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"10"},"/Users/corneezius/corneezius-apps/Dashboard/src/index.js",[],["16","17"],"/Users/corneezius/corneezius-apps/Dashboard/src/reportWebVitals.js",[],"/Users/corneezius/corneezius-apps/Dashboard/src/App.js",["18","19","20","21","22","23","24","25","26","27","28","29","30"],"import logo from './logo.svg';\nimport './App.css';\n\nimport * as firebase from 'firebase';\nimport '@firebase/database'\nimport '@firebase/auth';\nimport { useEffect, useState } from 'react';\n\nimport { Pie, Line } from 'react-chartjs-2';\nimport { Tabs, Select } from 'antd';\nconst { Option } = Select;\nconst { TabPane } = Tabs;\nvar _ = require('lodash');\n\nvar config = {\n  apiKey: \"AIzaSyDzF8wXH6JSLeW0m5HphLme0V7nV15srrk\",\n  authDomain: \"rumble-signup.firebaseapp.com\",\n  databaseURL: \"https://rumble-signup.firebaseio.com\",\n  projectId: \"rumble-signup\",\n  storageBucket: \"rumble-signup.appspot.com\",\n  messagingSenderId: \"142131072925\",\n  appId: \"1:142131072925:web:fdd8a9ed39d5f7b4e46974\",\n  measurementId: \"G-RDXNCRB8HG\"\n};\nif (!firebase.apps.length) {\n  firebase.initializeApp(config);\n}\n\nfunction App() {\n  const [data, setData] = useState(0);\n  const [urlCount, seturlCount] = useState([]);\n  const [urls, setUrls] = useState([]);\n  const [count, setCount] = useState([]);\n  const [visit, setVisit] = useState([]);\n  const [email, setEmail] = useState([]);\n\n\n  const [DateLabel, setDateLabel] = useState([]);\n  const [DateByCount, setDateByCount] = useState([]);\n  const [visitTrueTime, setvisitTrueTime] = useState([]);\n  const [visitCountTime, setvisitCountTime] = useState([]);\n  const [EmailTrueTime, setEmailTrueTime] = useState([]);\n  const [EmailCountTime, setEmailCountTime] = useState([]);\n\n  const [cloneDateLabel, setcloneDateLabel] = useState([]);\n  const [cloneDateByCount, setcloneDateByCount] = useState([]);\n  const [clonevisitTrueTime, setclonevisitTrueTime] = useState([]);\n  const [clonevisitCountTime, setclonevisitCountTime] = useState([]);\n  const [cloneEmailTrueTime, setcloneEmailTrueTime] = useState([]);\n  const [cloneEmailCountTime, setcloneEmailCountTime] = useState([]);\n\n\n  const [byDate, setbyDate] = useState([]);\n  const [DatePushed, setDatePushed] = useState([]);\n  const [DateEmail, setDateEmail] = useState([]);\n\n  const [regionCount, setregionCount] = useState([]);\n  const [regionList, setregionList] = useState([]);\n\n  useEffect(() => {\n    firebase\n      .database().ref()\n      .on(\"value\", snapshot => {\n        const data = snapshot.val()\n        const count = snapshot.numChildren();\n        if (snapshot.val()) {\n          const initMessages = [];\n          Object\n            .keys(data)\n            .forEach(message => initMessages.push(data[message]));\n\n          var reversed = initMessages.reverse()\n          console.log('--data--', reversed);\n          setData(reversed)\n\n          let currentDate = new Date()\n          let currentMonth = new Date().getMonth();\n          let currentYear = new Date().getFullYear();\n\n          var arr = [];\n          let urls = [];\n          let count = [];\n          let pushes = [];\n          let visited = [];\n          let email = [];\n          let emailCount = [];\n          let byDate = []\n          let VisitByTime = [];\n          let DateByCount = [];\n          let DatePushed = [];\n          let DateEmail = [];\n\n\n          let regions = []\n          let regionCount = [];\n          let region = [];\n          reversed.forEach(element => {\n            if (!(arr.some(e => e.url === element.url))) {\n              arr.push({ url: element.url, count: 0 });\n              pushes.push({ url: element.url, pushes: 0 });\n              email.push({ url: element.url, email: 0 });\n              urls.push(element.url);\n            }\n          });\n          reversed.forEach(element => {\n            if (element.time) {\n              if (!(byDate.some(e => new Date(e.date).getDate() == new Date(element.time).getDate()))) {\n                const diffTime = Math.abs(new Date(element.time) - currentDate);\n                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n                if (diffDays < 30) {\n                  console.log(new Date(element.time).getDate());\n                  byDate.push({ url: element.url, count: 0, date: element.time });\n                  DatePushed.push({ url: element.url, count: 0, date: element.time })\n                  DateEmail.push({ url: element.url, count: 0, date: element.time })\n                }\n\n              }\n            }\n            if (element.region) {\n              if (!(regions.some(e => e.region == element.region))) {\n                regions.push({ url: element.url, count: 0, region: element.region });\n              }\n            }\n          });\n\n\n          regions.forEach((e, index) => {\n            reversed.forEach((element, i) => {\n              if (e.region === element.region) {\n                e.count = e.count + 1\n              }\n            })\n          })\n\n          regions.forEach(element => {\n            regionCount.push(element.count)\n            region.push(element.region)\n          });\n\n          setregionCount(regionCount)\n          setregionList(region)\n\n          arr.forEach((e, index) => {\n            reversed.forEach((element, i) => {\n              if (e.url === element.url) {\n                e.count = e.count + 1;\n                if (element.click) {\n                  pushes[index].pushes = pushes[index].pushes + 1\n                }\n                if (element.email && element.email !== \"null\" && element.email != null && element.email !== undefined) {\n                  email[index].email = email[index].email + 1\n                }\n              }\n            });\n          });\n          byDate.forEach((e, index) => {\n            reversed.forEach((element, i) => {\n              if ((new Date(e.date).getDate()) === (new Date(element.time).getDate())) {\n                // if ((currentMonth === date.getMonth()) && (currentYear == date.getFullYear())) {\n                e.count = e.count + 1\n                if (element.click) {\n                  DatePushed[index].count = DatePushed[index].count + 1\n                }\n\n                if (element.email && element.email != \"null\" && element.email != null && element.email !== undefined) {\n                  console.log(element.email);\n                  DateEmail[index].count = DateEmail[index].count + 1\n                }\n\n                // }\n              }\n            })\n          })\n\n          arr.forEach(element => {\n            count.push(element.count)\n          });\n          pushes.forEach(element => {\n            visited.push(element.pushes)\n          });\n          email.forEach(element => {\n            emailCount.push(element.email)\n          });\n          byDate.forEach(element => {\n            VisitByTime.push(new Date(element.date).getDate())\n            DateByCount.push(element.count)\n          });\n\n\n          let PuhsedTrueTime = []\n          let pushedTrueCount = []\n          DatePushed.forEach(element => {\n            PuhsedTrueTime.push(new Date(element.date).getDate())\n            pushedTrueCount.push(element.count)\n          });\n\n          let EmailLabelTime = []\n          let EmailTimeCount = []\n          DateEmail.forEach(element => {\n            EmailLabelTime.push(new Date(element.date).getDate())\n            EmailTimeCount.push(element.count)\n          });\n\n          console.log('----date-----', byDate);\n          console.log('----DatePushed-----', DatePushed);\n          console.log('----DateEmail-----', DateEmail);\n\n\n          setbyDate(byDate)\n          setDatePushed(DatePushed)\n          setDateEmail(DateEmail)\n\n          setDateLabel(VisitByTime)\n          setcloneDateLabel(VisitByTime)\n          setDateByCount(DateByCount)\n          setcloneDateByCount(DateByCount)\n          setUrls(urls)\n          setCount(count)\n          seturlCount(arr)\n          setVisit(visited)\n          setEmail(emailCount)\n\n          setvisitTrueTime(PuhsedTrueTime)\n          setclonevisitTrueTime(PuhsedTrueTime)\n          setvisitCountTime(pushedTrueCount)\n          setclonevisitCountTime(pushedTrueCount)\n          setEmailTrueTime(EmailLabelTime)\n          setcloneEmailTrueTime(EmailLabelTime)\n          setEmailCountTime(EmailTimeCount)\n          setcloneEmailCountTime(EmailTimeCount)\n        }\n      });\n  }, []);\n\n\n  function handleChange(value) {\n    let VisitByTime = [];\n    let DateByCount = [];\n    let EmailLabelTime = [];\n    let EmailTimeCount = [];\n    let PuhsedTrueTime = []\n    let pushedTrueCount = []\n    if (value !== \"All\") {\n      byDate.forEach(element => {\n        if (value == element.url) {\n          VisitByTime.push(new Date(element.date).getDate())\n          DateByCount.push(element.count)\n        }\n      });\n      DateEmail.forEach(element => {\n        if (value == element.url) {\n          EmailLabelTime.push(new Date(element.date).getDate())\n          EmailTimeCount.push(element.count)\n        }\n      });\n      DatePushed.forEach(element => {\n        if (value == element.url) {\n          PuhsedTrueTime.push(new Date(element.date).getDate())\n          pushedTrueCount.push(element.count)\n        }\n      });\n      setDateLabel(VisitByTime)\n      setDateByCount(VisitByTime)\n      setEmailTrueTime(EmailLabelTime)\n      setEmailCountTime(EmailTimeCount)\n      setvisitTrueTime(PuhsedTrueTime)\n      setvisitCountTime(pushedTrueCount)\n\n\n    } else {\n      setDateLabel(cloneDateLabel)\n      setDateByCount(cloneDateByCount)\n      setEmailTrueTime(cloneEmailTrueTime)\n      setEmailCountTime(cloneEmailCountTime)\n      setvisitTrueTime(clonevisitTrueTime)\n      setvisitCountTime(clonevisitCountTime)\n    }\n  }\n\n\n  const Visit = {\n    labels: urls,\n    datasets: [\n      {\n        label: '# of Visit',\n        data: count,\n        backgroundColor: [\n          '#FF6384',\n          '#36A2EB',\n          '#FFCE56',\n          \"#FDEDEC\",\n          \"#B9770E\",\n          \"#45B39D\",\n          \"#6495ED\",\n          \"#CD5C5C\",\n          \"#154360\"\n        ],\n        hoverBackgroundColor: [\n          '#FF6384',\n          '#36A2EB',\n          '#FFCE56',\n          \"#FDEDEC\",\n          \"#B9770E\",\n          \"#45B39D\",\n          \"#6495ED\",\n          \"#CD5C5C\",\n          \"#154360\"\n        ],\n        borderWidth: 1,\n      },\n    ],\n  }\n\n\n\n  const regionData = {\n    labels: regionList,\n    datasets: [\n      {\n        label: 'Count by region',\n        data: regionCount,\n        backgroundColor: [\n          '#FF6384',\n          '#36A2EB',\n          '#FFCE56',\n          \"#FDEDEC\",\n          \"#B9770E\",\n          \"#45B39D\",\n          \"#6495ED\",\n          \"#CD5C5C\",\n          \"#154360\"\n        ],\n        hoverBackgroundColor: [\n          '#FF6384',\n          '#36A2EB',\n          '#FFCE56',\n          \"#FDEDEC\",\n          \"#B9770E\",\n          \"#45B39D\",\n          \"#6495ED\",\n          \"#CD5C5C\",\n          \"#154360\"\n        ],\n        borderWidth: 1,\n      },\n    ],\n  }\n\n\n  const pushes = {\n    labels: urls,\n    datasets: [\n      {\n        label: '# of Visit',\n        data: visit,\n        backgroundColor: [\n          '#FF6384',\n          '#36A2EB',\n          '#FFCE56',\n          \"#FDEDEC\",\n          \"#B9770E\",\n          \"#45B39D\",\n          \"#6495ED\",\n          \"#CD5C5C\",\n          \"#154360\"\n        ],\n        hoverBackgroundColor: [\n          '#FF6384',\n          '#36A2EB',\n          '#FFCE56',\n          \"#FDEDEC\",\n          \"#B9770E\",\n          \"#45B39D\",\n          \"#6495ED\",\n          \"#CD5C5C\",\n          \"#154360\"\n        ],\n        borderWidth: 1,\n      },\n    ],\n  }\n\n\n  const byDateChart = {\n    labels: DateLabel,\n    datasets: [\n      {\n        label: 'No. of visit By Date',\n        data: DateByCount,\n        fill: false,\n        backgroundColor: 'rgb(255, 99, 132)',\n        borderColor: 'rgba(255, 99, 132, 0.2)',\n      },\n    ],\n  }\n\n  const byDateVisit = {\n    labels: visitTrueTime,\n    datasets: [\n      {\n        label: 'No. of Pushed By Date',\n        data: visitCountTime,\n        fill: false,\n        backgroundColor: 'rgb(255, 99, 132)',\n        borderColor: 'rgba(255, 99, 132, 0.2)',\n      },\n    ],\n  }\n\n\n  const byDateEmail = {\n    labels: EmailTrueTime,\n    datasets: [\n      {\n        label: 'No. of Email By Date',\n        data: EmailCountTime,\n        fill: false,\n        backgroundColor: 'rgb(255, 99, 132)',\n        borderColor: 'rgba(255, 99, 132, 0.2)',\n      },\n    ],\n  }\n\n\n  const emailChart = {\n    labels: urls,\n    datasets: [\n      {\n        label: '# of Visit',\n        data: email,\n        backgroundColor: [\n          '#FF6384',\n          '#36A2EB',\n          '#FFCE56',\n          \"#FDEDEC\",\n          \"#B9770E\",\n          \"#45B39D\",\n          \"#6495ED\",\n          \"#CD5C5C\",\n          \"#154360\"\n        ],\n        hoverBackgroundColor: [\n          '#FF6384',\n          '#36A2EB',\n          '#FFCE56',\n          \"#FDEDEC\",\n          \"#B9770E\",\n          \"#45B39D\",\n          \"#6495ED\",\n          \"#CD5C5C\",\n          \"#154360\"\n        ],\n        borderWidth: 1,\n      },\n    ],\n  }\n\n  return (\n    <div className=\"MainDiv\">\n\n      <Tabs defaultActiveKey=\"1\" tabPosition={'left'}>\n        <TabPane key={1} tab={'Total Visit'}>\n          <div className=\"ChartCard\">\n            <Pie data={Visit} options={\n              {\n                title: {\n                  display: \"Title\",\n                  text: 'Total visit',\n                  fontSize: 25\n                },\n                maintainAspectRatio: false,\n                legend: {\n                  position: 'right',\n                  labels: {\n                    boxWidth: 10\n                  }\n                }\n              }\n            } />\n          </div>\n        </TabPane>\n        <TabPane key={2} tab={'Total Click/Pushed'}>\n          <div className=\"ChartCard\">\n            <Pie data={pushes} options={\n              {\n                title: {\n                  display: \"Title\",\n                  text: 'Total Click/Pushed',\n                  fontSize: 25\n                },\n                maintainAspectRatio: false,\n                legend: {\n                  position: 'right',\n                  labels: {\n                    boxWidth: 10\n                  }\n                }\n              }\n            } />\n          </div>\n        </TabPane>\n\n        <TabPane key={3} tab={'Total Email'}>\n          <div className=\"ChartCard\">\n            <Pie data={emailChart} options={\n              {\n                title: {\n                  display: \"Title\",\n                  text: 'Total Email',\n                  fontSize: 25\n                },\n                maintainAspectRatio: false,\n                legend: {\n                  position: 'right',\n                  labels: {\n                    boxWidth: 10\n                  }\n                }\n              }\n            } />\n          </div>\n        </TabPane>\n\n        <TabPane key={4} tab={'Count By Region'}>\n          <div className=\"ChartCard\">\n            <Pie data={regionData} options={\n              {\n                title: {\n                  display: \"Title\",\n                  text: 'Count By Region',\n                  fontSize: 25\n                },\n                maintainAspectRatio: false,\n                legend: {\n                  position: 'right',\n                  labels: {\n                    boxWidth: 10\n                  }\n                }\n              }\n            } />\n          </div>\n        </TabPane>\n      </Tabs>\n\n      <div style={{ margin: 40, color: 'gray', fontWeight: '600', textAlign: 'center', fontSize: 22 }}>\n        {/* Line Chart */}\n        <Select defaultValue=\"All\" style={{ width: '62%' }} onChange={handleChange}>\n          <Option value=\"All\">All</Option>\n          {urls.map((i, index) => {\n            return (\n              <Option value={i}>{i}</Option>\n            )\n          })}\n          {/* <Option value=\"jack\">Jack</Option>\n          <Option value=\"lucy\">Lucy</Option>\n          <Option value=\"Yiminghe\">yiminghe</Option> */}\n        </Select>\n      </div>\n\n\n      <Tabs defaultActiveKey=\"1\" tabPosition={'left'}>\n        <TabPane key={1} tab={'Total visit by Date'}>\n          <div className=\"ChartCard\">\n            <Line data={byDateChart}\n              options={{\n                maintainAspectRatio: false,\n                responsive: true,\n                title: {\n                  display: \"Title\",\n                  text: 'Total visit by Date',\n                  fontSize: 25\n                },\n                legend: {\n                  display: true,\n                  // position: 'right',\n                  labels: {\n                    boxWidth: 10\n                  }\n                },\n                scales: {\n                  yAxes: [{\n                    scaleLabel: {\n                      display: true,\n                      labelString: 'Count'\n                    },\n                    ticks: {\n                      beginAtZero: true,\n                    }\n                  }],\n                  xAxes: [{\n                    scaleLabel: {\n                      display: true,\n                      labelString: 'Date'\n                    }\n                  }],\n                }\n              }} />\n\n          </div>\n        </TabPane>\n        <TabPane key={2} tab={'Total pushed by Date'}>\n          <div className=\"ChartCard\">\n\n            <Line data={byDateVisit}\n              options={{\n                maintainAspectRatio: false,\n                responsive: true,\n                title: {\n                  display: \"Title\",\n                  text: 'Total visit by Date',\n                  fontSize: 25\n                },\n                legend: {\n                  display: true,\n                  // position: 'right',\n                  labels: {\n                    boxWidth: 10\n                  }\n                },\n                scales: {\n                  yAxes: [{\n                    scaleLabel: {\n                      display: true,\n                      labelString: 'Count'\n                    },\n                    ticks: {\n                      beginAtZero: true,\n                    }\n                  }],\n                  xAxes: [{\n                    scaleLabel: {\n                      display: true,\n                      labelString: 'Date'\n                    }\n                  }],\n                }\n              }} />\n          </div>\n        </TabPane>\n\n        <TabPane key={3} tab={'Total Email by Date'}>\n          <div className=\"ChartCard\">\n            <Line data={byDateEmail}\n              options={{\n                maintainAspectRatio: false,\n                responsive: true,\n                title: {\n                  display: \"Title\",\n                  text: 'Total visit by Date',\n                  fontSize: 25\n                },\n                legend: {\n                  display: true,\n                  // position: 'right',\n                  labels: {\n                    boxWidth: 10\n                  }\n                },\n                scales: {\n                  yAxes: [{\n                    scaleLabel: {\n                      display: true,\n                      labelString: 'Count'\n                    },\n                    ticks: {\n                      beginAtZero: true,\n                    }\n                  }],\n                  xAxes: [{\n                    scaleLabel: {\n                      display: true,\n                      labelString: 'Date'\n                    }\n                  }],\n                }\n              }} />\n\n          </div>\n        </TabPane>\n      </Tabs>\n      {/* <div class=\"fullscreen-bg\">\n        <video loop={true} muted={true} autoPlay={true} class=\"fullscreen-bg__video\">\n          <source src={sample} type=\"video/mp4\" />\n        </video>\n      </div>\n      <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }} style={{ height: '100%', alignItems: 'center', margin: 0 }}>\n        <Col style={{ backgroundColor: '#30254f', height: '100%', display: 'flex', alignItems: 'flex-end', justifyContent: 'center', flexDirection: 'column' }} span={4}>\n          <div style={{ display: 'flex', flexDirection: 'column', marginRight: 25, width: '60%' }}>\n            <a className=\"TabItem\">\n              WELCOME\n          </a>\n            <a className=\"TabItem\">\n              WHO WE ARE\n          </a>\n            <a className=\"TabItem\">\n              WHAT WE DO\n          </a>\n            <a className=\"TabItem\">\n              GET IN TOUCH\n          </a>\n          </div>\n        </Col>\n      </Row> */}\n      {/* <div style={{ flex: 1, backgroundColor: '#30254f', height: '100%' }}>\n          <div>\n            WELCOME\n          </div>\n          <div>\n            WHO WE ARE\n          </div>\n          <div>\n            WHAT WE DO\n          </div>\n          <div>\n            GET IN TOUCH\n          </div>\n        </div> */}\n      {/* <div style={{ flex: 4, backgroundColor: '#5e41a6' }}>\n\n        </div> */}\n    </div>\n  );\n}\n\nexport default App;\n",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":1,"column":8,"nodeType":"37","messageId":"38","endLine":1,"endColumn":12},{"ruleId":"35","severity":1,"message":"39","line":13,"column":5,"nodeType":"37","messageId":"38","endLine":13,"endColumn":6},{"ruleId":"35","severity":1,"message":"40","line":30,"column":10,"nodeType":"37","messageId":"38","endLine":30,"endColumn":14},{"ruleId":"35","severity":1,"message":"41","line":31,"column":10,"nodeType":"37","messageId":"38","endLine":31,"endColumn":18},{"ruleId":"35","severity":1,"message":"42","line":65,"column":15,"nodeType":"37","messageId":"38","endLine":65,"endColumn":20},{"ruleId":"35","severity":1,"message":"43","line":77,"column":15,"nodeType":"37","messageId":"38","endLine":77,"endColumn":27},{"ruleId":"35","severity":1,"message":"44","line":78,"column":15,"nodeType":"37","messageId":"38","endLine":78,"endColumn":26},{"ruleId":"45","severity":1,"message":"46","line":107,"column":65,"nodeType":"47","messageId":"48","endLine":107,"endColumn":67},{"ruleId":"45","severity":1,"message":"46","line":120,"column":48,"nodeType":"47","messageId":"48","endLine":120,"endColumn":50},{"ruleId":"45","severity":1,"message":"49","line":165,"column":52,"nodeType":"47","messageId":"48","endLine":165,"endColumn":54},{"ruleId":"45","severity":1,"message":"46","line":245,"column":19,"nodeType":"47","messageId":"48","endLine":245,"endColumn":21},{"ruleId":"45","severity":1,"message":"46","line":251,"column":19,"nodeType":"47","messageId":"48","endLine":251,"endColumn":21},{"ruleId":"45","severity":1,"message":"46","line":257,"column":19,"nodeType":"47","messageId":"48","endLine":257,"endColumn":21},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'_' is assigned a value but never used.","'data' is assigned a value but never used.","'urlCount' is assigned a value but never used.","'count' is assigned a value but never used.","'currentMonth' is assigned a value but never used.","'currentYear' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]